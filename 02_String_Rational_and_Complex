#First Step Julia : 02 String, Rational and Complex

"""
01. Char Type
"""
character = 's'
print(typeof(character), '\n')  # '문자 하나'의 타입은 Char 타입이다(작은따옴표)

print(Int64(character), '\n')  # Char->Int의 변환이 가능하다(ASCII)

character = 'λ'
print(typeof(character), '\n')  # 유니코드도 Char 타입에 속한다

print('\u2500', '\n')  # 작은따옴표 안에 \u로 시작하는 4자리까지의 수를 사용하는
print('\U25000', '\n')  # 혹은 \U로 시작하는 8자리까지의 수를 사용하는 유니코드를 입력할 수 있다

print('x'-'a', '\n')
print('x' == 'a', '\n')
print('x' > 'b', '\n')
# Char 타입끼리 한정된 가짓수의 연산과 비교가 가능하다

"""
02. String Type
"""
string = "Hello Julia"
string_else = """Hello Julia, Again"""
# 큰따옴표 2개, 3개를 이용해 문자열 값을 표현할 수 있다

print(typeof(string), '\n')
# 문자열은 String 타입을 갖는다

print(string[1], '\n')
print(string[end], '\n')
print(string[1:5], '\n')
print(string[3:3] == string[3], '\n')
# 문자열의 인덱싱이 가능하다, end는 문자열의 끝의 인덱스를 나타낸다
# 문자열의 범위를 벗어난 값으로 인덱싱하면, 에러를 일으킨다
# 범위 인덱싱과([1:4] 등) 위치 인덱싱([3] 등)은 다른 값을 반환한다
# 범위 인덱싱 -> String, 위치 인덱싱 -> Char

inter = "$string is string literal and $character is character literal"
print(inter, '\n')
# $를 이용해 문자열 안에 다른 값을 삽입할 수 있다

inter = "33 + 36 = $(33+36)"
print(inter, '\n')
# 삽입되는 값은 string 형식으로 변환될 수 있는 모든 리터럴이 가능하다
# $를 문자열에 넣고 싶다면 \$의 형태로 사용한다(이스케이핑)

print("Hi"=="Hi", '\n')
print("Hi"!="Bi", '\n')  # 문자열을 비교할 수 있다

print(search("Hi", 'H'), '\n')  # search 함수를 통해 문자열에서 문자의 인덱스를 찾을 수 있다

print(search("Hi Hello Heh Heh", 'H', 3), '\n') # 세 번째 인수로 오프셋을 줄 수 있다

print(contains("Hello World", "World"), '\n')  # contains 를 통해 문자열이 문자열을 포함하는지 알 수 있다

print('C' in "Hello Char", '\n')  # in 키워드 혹은 in(char, string)으로 문자열이 문자를 포함하는지 알 수 있다

print(join([2, 3, 4, 5], ",", "and"), '\n') # join(반복 가능한 객체, 사이에 넣을 문자, 사이에 넣을 문자)

print(repeat("Hi Hi", 10), '\n')  # repeat(문자열, 반복 횟수)로 문자열을 반복한다

"""
03. Complex Type
"""
imaginary = im
print(imaginary, '\n')
# 허수단위 i는 im으로 나타낼 수 있다

comp = 3im + 2
print(comp, '\n')
# 리터럴 계수(곱셈기호 생략)이 가능하고, 복소수 또한 im을 사용하여 나타낼 수 있다
# 리터럴 계수는 사칙연산보다 우선순위가 높다

print(typeof(comp), '\n'); comp = 3.2im + 4.2
print(typeof(comp), '\n')  # 복소수는 Complex{계수의 Type} 타입을 갖는다

print(comp/3, '\n'); print(comp+4, '\n'); print(comp*5, '\n'); print(abs(comp), '\n')
# 복소수 또한 여러 수치 연산을 적용할 수 있다

"""
03. Rational Type
"""
rational = 2//4
print(rational, '\n')
# 유리수 표현은 //을 이용하여 분자와 분모를 표현한다
# Julia는 유리수를 자동으로 약분한다

print(float(rational), '\n')
# 유리수는 부동소수점 수로 변환할 수 있다

print(rational+0.3, '\n'); print(abs(rational), '\n'); print(rational^0.3, '\n')
# 유리수 또한 여러 수치 연산을 적용할 수 있다
